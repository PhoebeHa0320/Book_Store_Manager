/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BookStoreManager;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.ResultSetMetaData;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableModel;
import net.proteanit.sql.DbUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;


/**
 *
 * @author honkaiwaifu
 */
public class GrantAccountForm extends javax.swing.JFrame {
    Connection con = NewConnection.getConnection();
    PreparedStatement ps, ps0, ps1, ps2;
    ResultSet rs, rs1, rs2;
    DefaultTableModel d;
    /**
     * Creates new form DAILYDOC
     */
    public GrantAccountForm() {
        initComponents();
        User_load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        AccountTable = new javax.swing.JTable();
        SaveButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        Search = new javax.swing.JButton();
        ExcelExport = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        RecKeyInformation = new javax.swing.JTextField();
        Help = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        MaNVList = new javax.swing.JComboBox<>();
        SearchSelection = new javax.swing.JComboBox<>();
        LevelSelection = new javax.swing.JComboBox<>();
        ClearPassField = new javax.swing.JButton();
        ShowPassword = new javax.swing.JCheckBox();
        password = new javax.swing.JPasswordField();
        EmployeeInformation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(230, 34, 34));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CẤP TÀI KHOẢN TRUY CẬP");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Mã nhân viên");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Tài khoản");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Mật khẩu");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Cấp độ");

        AccountTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã nhân viên", "Tài khoản", "Mật khẩu", "Cấp độ", "Khoá phục hồi", "Salt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        AccountTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AccountTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(AccountTable);

        SaveButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        SaveButton.setText("Lưu");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        EditButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        EditButton.setText("Sửa");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        DeleteButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        DeleteButton.setText("Xoá");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        RefreshButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        RefreshButton.setText("Làm mới");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        Search.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Search.setText("Tìm kiếm");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        ExcelExport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ExcelExport.setText("Xuất Excel");
        ExcelExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcelExportActionPerformed(evt);
            }
        });

        ExitButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        ExitButton.setText("Thoát");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Khoá phục hồi");

        Help.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Help.setText("?");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 51, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("CHÚ Ý: Mật khẩu được băm (hash) bằng BCrypt. Không có cách nào có thể giải ngược lại mật khẩu");

        MaNVList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        MaNVList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn mã nhân viên" }));

        SearchSelection.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        SearchSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn loại tìm kiếm", "Mã nhân viên", "Tài khoản", "Cấp độ" }));

        LevelSelection.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        LevelSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn cấp độ", "Quản Trị", "Thủ Kho", "Bán Hàng" }));

        ClearPassField.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ClearPassField.setText("Xoá mật khẩu");
        ClearPassField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearPassFieldActionPerformed(evt);
            }
        });

        ShowPassword.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ShowPassword.setText("Hiện mật khẩu");
        ShowPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPasswordActionPerformed(evt);
            }
        });

        password.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        EmployeeInformation.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        EmployeeInformation.setText("Thông tin");
        EmployeeInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EmployeeInformationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(SaveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64)
                                .addComponent(DeleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(RefreshButton)
                                .addGap(59, 59, 59)
                                .addComponent(ExcelExport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(RecKeyInformation)
                        .addGap(161, 161, 161))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(SearchSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(MaNVList, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(EmployeeInformation, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LevelSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Help)
                        .addGap(18, 18, 18)
                        .addComponent(ClearPassField)
                        .addGap(18, 18, 18)
                        .addComponent(ShowPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(MaNVList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EmployeeInformation))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Help)
                                .addComponent(ClearPassField)
                                .addComponent(ShowPassword)))
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(LevelSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(RecKeyInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SearchSelection, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(EditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DeleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RefreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ExcelExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SaveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    //Load bảng từ SQL Server
    public void User_load() {
        int c;
        String skipuser = AdminPageForm.UserName.getText(); //bỏ qua tài khoản đang đăng nhập
        RecKeyInformation.setEditable(true);
        LevelSelection.setSelectedIndex(0);
        MaNVList.setSelectedIndex(0);
        //danh sach thong tin sach
        
        
        try {
            ps1 = con.prepareStatement("SELECT * FROM DANGNHAP WHERE NOT Username = ? ");
            ps1.setString(1,skipuser);
            rs = ps1.executeQuery();
            
            ps2 = con.prepareStatement("SELECT MaNV FROM NHANVIEN");
            rs1 = ps2.executeQuery();
            while (rs1.next()) {
            String type = rs1.getString("MaNV");
            MaNVList.addItem(type);
            }
            
            ResultSetMetaData rad = rs.getMetaData();
            c = rad.getColumnCount();
            
            d = (DefaultTableModel)AccountTable.getModel();
            d.setRowCount(0);
            
            while (rs.next()) {
                Vector v2 = new Vector();
                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("MaNV"));
                    v2.add(rs.getString("Username"));
                    v2.add(rs.getString("Password"));
                    v2.add(rs.getString("AccLevel"));
                    v2.add(rs.getString("RecKey"));
                    v2.add(rs.getString("Salt"));                   
                }
                d.addRow(v2);
            }
             d.fireTableDataChanged();
        } catch (SQLException ex) {
            Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
        }
                                                                                        
                
    }
    
    
    //thêm bản ghi
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:      
       String employeecode, user, pass, level;
       employeecode = MaNVList.getSelectedItem().toString();
       user = username.getText();
       pass = password.getText();
       level = LevelSelection.getSelectedItem().toString();
       if (employeecode.equals("Chọn mã nhân viên") ||
           user.equals("") ||
           pass.equals("") ||
           level.equals("Chọn cấp độ")) {
           JOptionPane.showMessageDialog(this,"Vui lòng nhập đầy đủ thông tin",
                "Thông báo",JOptionPane.ERROR_MESSAGE);
       }
       else {
           try {
                ps0 = con.prepareStatement("SELECT COUNT(Username) AS VAILD FROM DANGNHAP WHERE Username = ? GROUP BY Username");
                ps0.setString(1, user);
                rs = ps0.executeQuery();
                
                if(rs.next()) {
                    Integer vaild = Integer.valueOf(rs.getString("VAILD"));
                    if (vaild == 1) {                      
                         JOptionPane.showMessageDialog(this,"Tên tài khoản đã tồn tại!",
                    "Thông báo",JOptionPane.ERROR_MESSAGE);
                    }                  
                }
                switch (level) {
                            case "Quản Trị" -> {
                                //quản trị
                                ps = con.prepareStatement("INSERT DANGNHAP (MaNV, Username, Password, Acclevel) VALUES (?,?,?,?)");
                                ps.setString(1,employeecode);
                                ps.setString(2, user);
                                ps.setString(3, pass);
                                ps.setString(4, level);
                                ps.executeUpdate();
                                JOptionPane.showMessageDialog(this,"Thêm tài khoản thành công!",
                                        "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                            }
                            case "Thủ Kho" -> {
                                //thủ kho
                                ps = con.prepareStatement("INSERT DANGNHAP (MaNV, Username, Password, Acclevel) VALUES (?,?,?,?)");
                                ps.setString(1,employeecode);
                                ps.setString(2, user);
                                ps.setString(3, pass);
                                ps.setString(4, level);
                                ps.executeUpdate();
                                JOptionPane.showMessageDialog(this,"Thêm tài khoản thành công!",
                                        "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                            }
                            case "Bán Hàng" -> {
                                //bán hàng
                                ps = con.prepareStatement("INSERT DANGNHAP (MaNV, Username, Password, Acclevel) VALUES (?,?,?,?)");
                                ps.setString(1,employeecode);
                                ps.setString(2, user);
                                ps.setString(3, pass);
                                ps.setString(4, level);
                                ps.executeUpdate();
                                JOptionPane.showMessageDialog(this,"Thêm tài khoản thành công!",
                                        "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                            }
                            default -> JOptionPane.showMessageDialog(this,"Chưa chọn loại tài khoản","Cấp tài khoản", JOptionPane.ERROR_MESSAGE);
                        }
                
                username.setText("");
                password.setText("");
                RecKeyInformation.setText("");

                User_load();
                LevelSelection.setSelectedIndex(0);
                SearchSelection.setSelectedIndex(0);
           
            } catch (SQLException ex) {
                Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
    }//GEN-LAST:event_SaveButtonActionPerformed
    //thao tác trên bảng
    private void AccountTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AccountTableMouseClicked
        d = (DefaultTableModel)AccountTable.getModel();
        int selectIndex = AccountTable.getSelectedRow();        
        MaNVList.setSelectedItem(d.getValueAt(selectIndex, 0).toString());
        username.setText(d.getValueAt(selectIndex, 1).toString());
        password.setText(d.getValueAt(selectIndex, 2).toString());
        LevelSelection.setSelectedItem(d.getValueAt(selectIndex, 3).toString());
        RecKeyInformation.setText(d.getValueAt(selectIndex, 4).toString());
                   
        username.setEditable(false);
        MaNVList.setEnabled(false);
        SaveButton.setEnabled(false);
    }//GEN-LAST:event_AccountTableMouseClicked
    //sửa bản ghi
    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
       d = (DefaultTableModel)AccountTable.getModel();
       int selectIndex = AccountTable.getSelectedRow();
       String employeecode, user, pass, level;
       employeecode = d.getValueAt(selectIndex, 0).toString();
       user = username.getText();
       pass = password.getText();
       level = LevelSelection.getSelectedItem().toString();
       if (user.equals("") ||
           pass.equals("") ||
           level.equals("Chọn cấp độ")) {
           JOptionPane.showMessageDialog(this,"Vui lòng nhập đầy đủ thông tin",
                "Thông báo",JOptionPane.ERROR_MESSAGE);
       }
       else {
           try {                
                switch (level) {
                            case "Quản Trị" -> {
                                //quản trị
                                ps = con.prepareStatement("UPDATE DANGNHAP SET Username = ?, Password = ?, Acclevel = ? "
                                        + "WHERE MaNv = ?");
                                ps.setString(1, user);
                                ps.setString(2, pass);
                                ps.setString(3, level);
                                ps.setString(4,employeecode);
                                ps.executeUpdate();
                                JOptionPane.showMessageDialog(this,"Cập nhật tài khoản thành công!",
                                        "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                            }
                            case "Thủ Kho" -> {
                                //thủ kho
                                ps = con.prepareStatement("UPDATE DANGNHAP SET Username = ?, Password = ?, Acclevel = ? "
                                        + "WHERE MaNv = ?");
                                ps.setString(1, user);
                                ps.setString(1, user);
                                ps.setString(2, pass);
                                ps.setString(3, level);
                                ps.setString(4,employeecode);
                                ps.executeUpdate();
                                JOptionPane.showMessageDialog(this,"Cập nhật tài khoản thành công!",
                                        "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                            }
                            case "Bán Hàng" -> {
                                //bán hàng
                                ps = con.prepareStatement("UPDATE DANGNHAP SET Username = ?, Password = ?, Acclevel = ? "
                                        + "WHERE MaNv = ?");
                                ps.setString(1, user);
                                ps.setString(1, user);
                                ps.setString(2, pass);
                                ps.setString(3, level);
                                ps.setString(4,employeecode);
                                ps.executeUpdate();
                                JOptionPane.showMessageDialog(this,"Cập nhật tài khoản thành công!",
                                        "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                            }
                            default -> JOptionPane.showMessageDialog(this,"Chưa chọn loại tài khoản","Cấp tài khoản", JOptionPane.ERROR_MESSAGE);
                        }
                
                MaNVList.setEnabled(true);
                SaveButton.setEnabled(true);
                username.setText("");
                password.setText("");
                RecKeyInformation.setText("");

                User_load();
                username.setEditable(true);
                LevelSelection.setSelectedIndex(0);
                SearchSelection.setSelectedIndex(0);
           
            } catch (SQLException ex) {
                Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
            }
       }
    }//GEN-LAST:event_EditButtonActionPerformed
    //làm mới
    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        username.setText("");
        password.setText("");
        RecKeyInformation.setText("");
        
        User_load();
        username.setEditable(true);
        LevelSelection.setSelectedIndex(0);
        SearchSelection.setSelectedIndex(0);
    }//GEN-LAST:event_RefreshButtonActionPerformed
    //xoá bản ghi
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
       d = (DefaultTableModel)AccountTable.getModel();
       int selectIndex = AccountTable.getSelectedRow();
       String employeecode = d.getValueAt(selectIndex, 0).toString();
       String user = username.getText();
           try {
                ps = con.prepareStatement("DELETE FROM DANGNHAP WHERE MaNv = ? AND Username = ?");
                ps.setString(1, employeecode);
                ps.setString(2, user);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this,"Xoá tài khoản thành công!",
                            "Thông báo",JOptionPane.INFORMATION_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
            }
       
    }//GEN-LAST:event_DeleteButtonActionPerformed
    //Tìm kiếm bản ghi
    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        String search = SearchField.getText();
        String typesearch = SearchSelection.getSelectedItem().toString();
        try {
            switch (typesearch) {
                case "Mã nhân viên" -> {
                    ps = con.prepareStatement("SELECT * FROM DANGNHAP WHERE MaNV = ?");
                    ps.setString(1,search);
                    rs=ps.executeQuery();
                    AccountTable.setModel(DbUtils.resultSetToTableModel(rs));
                }
                case "Tài khoản" -> {
                    ps = con.prepareStatement("SELECT * FROM DANHNHAP WHERE Username = ?");
                    ps.setString(1,search);
                    rs=ps.executeQuery();
                    AccountTable.setModel(DbUtils.resultSetToTableModel(rs));
                }
                case "Cấp độ" -> {
                    ps = con.prepareStatement("SELECT * FROM DANGNHAP WHERE AccLevel = ?");
                    ps.setString(1,search);
                    rs=ps.executeQuery();
                    AccountTable.setModel(DbUtils.resultSetToTableModel(rs));
                }
                default -> JOptionPane.showMessageDialog(this,"Chưa chọn loại tìm kiếm","Tìm kiếm", JOptionPane.ERROR_MESSAGE);
            }
           
            } catch (SQLException ex) {
                Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
            }
    }//GEN-LAST:event_SearchActionPerformed
    //Xuất Excel
    private void ExcelExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcelExportActionPerformed
        // TODO add your handling code here:
        TableModel model = AccountTable.getModel();
        JFileChooser excelExportChooser = new JFileChooser();
        excelExportChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        excelExportChooser.setDialogTitle("Save Excel File");
        //filter the file
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Excel Files", "*.xls", "xls", "xlsx", "xlsn");
        excelExportChooser.addChoosableFileFilter(filter);
        excelExportChooser.setFileFilter(filter);
        int excelchooser = excelExportChooser.showSaveDialog(null);

        if (excelchooser == JFileChooser.APPROVE_OPTION) {
            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("SalesReturnsDetails");

            Row row;
            Cell cell;

            try {
                // write the column headers
                row = sheet.createRow(0);
                for (int j = 0; j < model.getColumnCount(); j++) {
                    cell = row.createCell(j);
                    cell.setCellValue(model.getColumnName(j));
                }

                for (int i = 0; i < model.getRowCount(); i++) {

                    row = sheet.createRow(i + 1);

                    for (int j = 0; j < model.getColumnCount(); j++) {
                        cell = row.createCell(j);
                        cell.setCellValue(model.getValueAt(i, j).toString());

                    }

                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            FileOutputStream excelFIS;

            try {
                excelFIS = new FileOutputStream(excelExportChooser.getSelectedFile() + ".xlsx");
                workbook.write(excelFIS);
                JOptionPane.showMessageDialog(null, "Xuất thành công",
                            "Thông báo",JOptionPane.INFORMATION_MESSAGE);
                workbook.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        
    }//GEN-LAST:event_ExcelExportActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        // TODO add your handling code here:
         this.dispose();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Mật khẩu tự động mã hoá qua BCrypt\n"
                + "Khi chọn xem tài khoản từ bảng sẽ không tự động giải mã được",
                            "Thông báo",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_HelpActionPerformed

    private void ShowPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPasswordActionPerformed
        // TODO add your handling code here:
        if (ShowPassword.isSelected()){
            password.setEchoChar((char)0);
        } else {
            password.setEchoChar('*');
        }
    }//GEN-LAST:event_ShowPasswordActionPerformed

    private void ClearPassFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearPassFieldActionPerformed
        // TODO add your handling code here:
        password.setText("");
    }//GEN-LAST:event_ClearPassFieldActionPerformed
    //hiện thông tin về nhân viên
    private void EmployeeInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EmployeeInformationActionPerformed
        // TODO add your handling code here:
        String employeecode, name, tel, addr,job;
        employeecode = MaNVList.getSelectedItem().toString();
        
        try {
            ps = con.prepareStatement("SELECT * FROM NHANVIEN WHERE MaNV = ?");
            ps.setString(1, employeecode);
            rs = ps.executeQuery();
            if (rs.next()) {
                name = String.valueOf(rs.getString("TenNV"));
                tel = String.valueOf(rs.getString("Tel"));
                addr = String.valueOf(rs.getString("Address"));
                job = String.valueOf(rs.getString("Job"));
                JOptionPane.showMessageDialog(this, "Thông tin nhân viên\n"
                                            + "Tên nhân viên: " + name +"\n"
                                            + "Số điện thoại: " + tel +"\n"
                                            + "Địa chỉ: " + addr +"\n"
                                            + "Công việc: " + job +"\n",
                            "Thông báo",JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GrantAccountForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        
       
    }//GEN-LAST:event_EmployeeInformationActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GrantAccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GrantAccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GrantAccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GrantAccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GrantAccountForm dl = new GrantAccountForm();
                dl.setVisible(true);
                dl.setResizable(false);
                dl.setTitle("Cấp tài khoản");
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable AccountTable;
    private javax.swing.JButton ClearPassField;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton EmployeeInformation;
    private javax.swing.JButton ExcelExport;
    private javax.swing.JButton ExitButton;
    private javax.swing.JButton Help;
    private javax.swing.JComboBox<String> LevelSelection;
    private javax.swing.JComboBox<String> MaNVList;
    private javax.swing.JTextField RecKeyInformation;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton Search;
    private javax.swing.JTextField SearchField;
    private javax.swing.JComboBox<String> SearchSelection;
    private javax.swing.JCheckBox ShowPassword;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
}
